service: newsbay-backend

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: ap-south-1
  profile: serverless-Divyanshu
  stage: dev
  environment: 
    TableName: ${self:custom.tableName}
    BucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
      Resource: '*'

plugins:
  - serverless-webpack

package:
  individually: true

custom:
  tableName: newsbay-table
  bucketName: news-bay-bucket

functions:
  authenticate:
    handler: lambdas/authenticate.handler
  getCategory:
    handler: lambdas/getCategory.handler
    events:
      - http: 
          path: api/v2/category
          method: GET
  addCategory:
    handler: lambdas/addCategory.handler
    events:
      - http: 
          path: api/v2/category
          method: POST
          authorizer: 
            name: authenticate
            identitySource: method.request.header.Authorization
            type: token
  articles:
    handler: lambdas/articles.handler
    events:
      - http: 
          path: api/v2/articles
          method: ANY
          cors: true
          # authorizer: 
          #   name: authenticate
          #   identitySource: method.request.header.Authorization
          #   type: token
  editorJob:
    handler: lambdas/editorJob.handler
    events:
      - http:
          path: api/v2/getUnpublishedPosts
          method: GET
          # authorizer: 
          #   name: authenticate
          #   identitySource: method.request.header.Authorization
          #   type: token
      - http:
          path: api/v2/postStatus
          method: PATCH
          # authorizer: 
          #   name: authenticate
          #   identitySource: method.request.header.Authorization
          #   type: token
      - http:
          path: api/v2/deletePost
          method: DELETE
          # authorizer: 
          #   name: authenticate
          #   identitySource: method.request.header.Authorization
          #   type: token
  getArticles:
    handler: lambdas/getArticles.handler
    events:
      - http:
          path: api/v2/getArticles
          method: GET

resources:
  Resources:
  # s3 Bucket
    NewsBayBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: PublicRead
  # DynamoDB
    NewsBayDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: user
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: user-article-index
            KeySchema:
              - AttributeName: user
                KeyType: HASH
              - AttributeName: sk
                KeyType: RANGE 
            Projection:
              ProjectionType: ALL
  # Cognito
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Generate a name based on the stage
        UserPoolName: newsbay_${self:provider.stage}_user_pool
        # Set email as an alias
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: newsbay_${self:provider.stage}_user_pool_client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

    CognitoUserPoolGroupAdmin:
      Type: AWS::Cognito::UserPoolGroup
      Properties: 
        Description: "Newsbay Admins"
        GroupName: "admin"
        UserPoolId:
          Ref: CognitoUserPool 
    CognitoUserPoolGroupEditor:
      Type: AWS::Cognito::UserPoolGroup
      Properties: 
        Description: "Newsbay Editors"
        GroupName: "editor"
        UserPoolId:
          Ref: CognitoUserPool 
    CognitoUserPoolGroupReporter:
      Type: AWS::Cognito::UserPoolGroup
      Properties: 
        Description: "Newsbay Reporters"
        GroupName: "reporter"
        UserPoolId:
          Ref: CognitoUserPool 